package ru.komiss77.modules.games;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.inventory.ItemFlag;
import org.bukkit.inventory.ItemStack;
import ru.komiss77.Ostrov;
import ru.komiss77.enums.Game;
import ru.komiss77.enums.GameState;
import ru.komiss77.enums.Stat;
import ru.komiss77.events.GameInfoUpdateEvent;
import ru.komiss77.modules.items.ItemBuilder;
import ru.komiss77.modules.player.Oplayer;
import ru.komiss77.modules.translate.Lang;
import ru.komiss77.objects.CaseInsensitiveMap;
import ru.komiss77.utils.ItemUtil;

public class GameInfo {

    public final Game game;

    private int gameOnline; //–¥–ª—è –æ–¥–∏–Ω–æ—á–µ–∫, –ª–∏–±–æ –æ–±—â–∏–π –æ–Ω–ª–∞–π–Ω –Ω–∞ –∞—Ä–µ–Ω–∞—Ö
    private final CaseInsensitiveMap<ArenaInfo> arenas = new CaseInsensitiveMap<>(); //position –≤ –º–µ–Ω—é, –∞—Ä–µ–Ω–∞. String,Arena –Ω–µ–ª—å–∑—è - –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞—Ä–µ–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö!!
    public Material mat;

    public GameInfo(final Game game) {
        this.game = game;
        mat = Material.matchMaterial(game.mat);
        if (mat == null) mat = Material.BEDROCK;

        // if (game.type==ServerType.ONE_GAME) {
        //–¥–ª—è –æ–¥–∏–Ω–æ—á–µ–∫ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–º –≤ –Ω—É–ª–µ–≤–æ–π –∞—Ä–µ–Ω–µ
        //    final ArenaInfo ai = new ArenaInfo(this, game.suggestName, "", game.level, game.reputation, mat==null ? Material.BEDROCK : mat);
        //    arenas.put(game.suggestName, ai);

        // } else if (game.type==ServerType.ARENAS || game.type==ServerType.LOBBY) {

        //

        //  }

    }


    public ItemStack getIcon(final Oplayer op) {
        final boolean hasLevel = op.getStat(Stat.LEVEL) >= game.level;
        final boolean hasReputation = op.reputationCalc >= game.reputation;

        return switch (game.type) {

            case ONE_GAME -> new ItemBuilder(mat.asItemType())
                .name(op.eng ? Lang.t(game.displayName, Lang.EN) : game.displayName)
                .amount(Math.max(Math.min(gameOnline, 60), 1))
                .lore("")
                .lore(game.description)
                .lore("")
                .lore(getState().displayColor + getState().name())
                .lore((hasLevel && hasReputation && gameOnline >= 0
                    ? (op.eng ? "¬ßaü¢ñ Click ¬ß—Å- PLAY" : "¬ßaü¢ñ –ö–ª–∏–∫ ¬ß—Å- –ò–ì–†–ê–¢–¨")
                    : (op.eng ? "¬ß–∫Not available!" : "¬ß–∫–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"))
                    + " ¬ß7(" + (gameOnline >= 0 ? gameOnline : "¬ß4X") + "¬ß7)")
                .flags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_ADDITIONAL_TOOLTIP).build();

            case LOBBY -> new ItemBuilder(mat.asItemType())
                .name(op.eng ? Lang.t(game.displayName, Lang.EN) : game.displayName)
                .amount(Math.max(Math.min(gameOnline, 60), 1))
                .lore("")
                .lore(getState().displayColor + getState().name())
                .flags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_ADDITIONAL_TOOLTIP).build();

            case ARENAS -> new ItemBuilder(mat.asItemType())
                .name(op.eng ? Lang.t(game.displayName, Lang.EN) : game.displayName)
                .amount(Math.max(Math.min(gameOnline, 60), 1))
                .lore("")
                .lore(game.description)
                .lore("")
                .lore(getState().displayColor + getState().name())
                .lore((hasLevel && hasReputation && gameOnline >= 0
                    ? (op.eng ? "¬ßaü¢ñ Left Click ¬ß—Å- PLAY" : "¬ßaü¢ñ –õ–µ–≤—ã–π –ö–ª–∏–∫ ¬ß—Å- –ò–ì–†–ê–¢–¨")
                    : (op.eng ? "¬ß–∫Not available!" : "¬ß–∫–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω!"))
                    + " ¬ß7(" + (gameOnline >= 0 ? gameOnline : "¬ß4X") + "¬ß7)")
                .lore(op.eng ? "¬ßaü¢ñ Right Click ¬ß–∫- MAPS" : "¬ßaü¢ñ –ü—Ä–∞–≤—ã–π –ö–ª–∏–∫ ¬ß–∫- –ê–†–ï–ù–´")
                .lore(gameOnline >= 0 ? (op.eng ? "¬ß7Players: " : "¬ß7–ò–≥—Ä–∞—é—Ç: ") + gameOnline : "")
                .flags(ItemFlag.HIDE_ATTRIBUTES, ItemFlag.HIDE_ADDITIONAL_TOOLTIP).build();

            default -> ItemUtil.air.clone();

        };

    }


    public void update(final String serverName, final String arenaName, final GameState state, final int players,
                       final String line0, final String line1, final String line2, final String line3) {

        final ArenaInfo ai = arenas.computeIfAbsent(serverName + arenaName,
            k -> new ArenaInfo(this, serverName, arenaName, 0, -100, Material.BEDROCK, arenas.size()));

        switch (game.type) {
            case ONE_GAME -> {
                if (game == Game.SE) {
                    gameOnline -= ai.players;
                    gameOnline += players;
                } else {
                    gameOnline = players;
                }
                ai.update(state, players,
                    game.displayName,
                    arenaName, players >= 0 ? GameState.–†–ê–ë–û–¢–ê–ï–¢.displayColor + GameState.–†–ê–ë–û–¢–ê–ï–¢.name() : GameState.–í–´–ö–õ–Æ–ß–ï–ù–ê.displayColor + GameState.–í–´–ö–õ–Æ–ß–ï–ù–ê.name(), players > 0 ? "¬ß1" + players : "");
            }
            case LOBBY -> {
                gameOnline -= ai.players;
                gameOnline += players;
                ai.update(state, players, game.displayName, arenaName, players >= 0 ? GameState.–†–ê–ë–û–¢–ê–ï–¢.displayColor + GameState.–†–ê–ë–û–¢–ê–ï–¢.name() : GameState.–í–´–ö–õ–Æ–ß–ï–ù–ê.displayColor + GameState.–í–´–ö–õ–Æ–ß–ï–ù–ê.name(), players > 0 ? "¬ß1" + players : "");
            }
            case ARENAS -> {
                gameOnline -= ai.players; //—É–±–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã–π –æ–Ω–ª–∞–π–Ω –∞—Ä–µ–Ω—ã
                if (gameOnline < 0) gameOnline = 0;
                gameOnline += players; //–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–Ω–ª–∞–π–Ω –∞—Ä–µ–Ω—ã
                ai.update(state, players, line0, line1, line2, line3);
            }
            default -> {
            }
        }

        if (Bukkit.isPrimaryThread()) {
            new GameInfoUpdateEvent(ai).callEvent();
        } else {
            Ostrov.sync(() -> new GameInfoUpdateEvent(ai).callEvent(), 0);
        }
    }


    //–Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ - –º–æ–≥—É—Ç—å –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞—Ä–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    public ArenaInfo getArena(final String serverName, final String arenaName) {
        return arenas.get(serverName + arenaName);
        //int online = 0;
       /* if (game.type==ServerType.ONE_GAME) {
            return arenas.get("");//arenas.get(0);
        }
        for (ArenaInfo a:arenas.values()) {
            if (a.server.equals(server) && a.arenaName.equals(arenaName)) {
                return a;
            }
        }
        return null;*/
    }

    public List<String> getArenaNames(final String server) {
        List<String> list = new ArrayList<>();
        for (ArenaInfo a : arenas.values()) {
            if (a.server.equalsIgnoreCase(server)) list.add(a.arenaName);
        }
        return list;
    }

    public List<String> getArenaNames() {
        //return arenas.values().stream().collect(Collectors.toList());
        List<String> list = new ArrayList<>(arenas.size());
        for (ArenaInfo a : arenas.values()) {
            list.add(a.arenaName);
        }
        return list;
    }


    //public String getServername() {
    // return arenas.get(0).server;
    //}

    public int getOnline() {
        return gameOnline;
    }

    public int count() {
//Ostrov.log_warn("arenas.size="+arenas.size());
        return arenas.size();
    }

    public GameState getState() {
        return switch (game.type) {
            case LOBBY -> GameState.–†–ê–ë–û–¢–ê–ï–¢;
            case ONE_GAME -> gameOnline >= 0 ? GameState.–†–ê–ë–û–¢–ê–ï–¢ : GameState.–í–´–ö–õ–Æ–ß–ï–ù–ê;
            case ARENAS -> arenas.isEmpty() ? GameState.–í–´–ö–õ–Æ–ß–ï–ù–ê : GameState.–†–ê–ë–û–¢–ê–ï–¢;
            default -> GameState.–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–û;
        };

    }

    public ArenaInfo getArena(final int slot) {
        for (ArenaInfo ai : arenas.values()) {
            if (ai.slot == slot) {
                return ai;
            }
        }
        return null;
    }

    public Collection<ArenaInfo> arenas() {
        return arenas.values();
    }

    public void clear() {
        arenas.clear();
    }

}
